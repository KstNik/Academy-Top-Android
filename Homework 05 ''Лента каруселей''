ВНИМАНИЕ! В проекте применяется технология Jetpack Compose


				1. Создание приложения


1.1. Запустить Android Studio

1.2. Выбрать "New Project …"

1.3. Вкладка "Phone and Tablet" -> выбрать "Empty Activity" -> кнопка "Next"

1.4. Вкладка "New Project …"
	a) изменить имя проекта: Gallery
	b) установить
		Minimum SDK: API 24 ("Nougat"; Android 7.0)
		Build configuration language: Kotlin DSL (build grade.kts) [Recommended]
	c) кнопка "Finish"


				2. Изменения в проекте


2.1. /app/src/main/java/com/example/gallery/MainActivity.kt – изменить код:

package com.example.gallery

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.animation.Crossfade
import androidx.compose.animation.core.*
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import com.example.gallery.ui.theme.GalleryTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            GalleryTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    CarouselList()
                }
            }
        }
    }
}

@Composable
fun CarouselList() {
    val images = listOf(
        R.drawable.victor_tsoi,
        R.drawable.vladimir_vysotsky,
        R.drawable.igor_talkov
    )

    // Список каруселей с разными анимациями
    val carousels = listOf(
        "Carousel 1: Fade Animation",
        "Carousel 2: Slide Up-Down Animation",
        "Carousel 3: Zoom In-Out Animation"
    )

    // Вертикальный список каруселей
    LazyColumn(
        modifier = Modifier.fillMaxSize()
    ) {
        items(carousels.size) { index ->
            // Каждая карусель занимает весь экран
            Box(
                modifier = Modifier
                    .fillParentMaxSize()
                    .padding(16.dp)
            ) {
                Carousel(carousels[index], images, index)
            }
        }
    }
}

@Composable
fun Carousel(name: String, images: List<Int>, carouselIndex: Int) {
    var currentIndex by remember { mutableStateOf(0) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            text = name,
            style = MaterialTheme.typography.headlineSmall,
            modifier = Modifier.padding(bottom = 8.dp)
        )

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .weight(1f) // Занимает всё доступное пространство
        ) {
            when (carouselIndex) {
                0 -> {
                    // Анимация плавного появления (Crossfade)
                    Crossfade(
                        targetState = currentIndex,
                        animationSpec = tween(durationMillis = 1000)
                    ) { index ->
                        Image(
                            painter = painterResource(id = images[index]),
                            contentDescription = null,
                            modifier = Modifier.fillMaxSize(),
                            contentScale = ContentScale.Fit // Сохранение пропорций
                        )
                    }
                }
                1 -> {
                    // Анимация смещения вверх-вниз
                    val offsetY by animateFloatAsState(
                        targetValue = when (currentIndex) {
                            0 -> 0f // Начальное положение
                            1 -> -200f // Движение вверх
                            2 -> 200f // Движение вниз
                            else -> 0f // Возвращение в центр
                        },
                        animationSpec = keyframes {
                            durationMillis = 1500
                            0f at 0 // Начало
                            -200f at 500 // Вверх
                            200f at 1000 // Вниз
                            0f at 1500 // Центр
                        }
                    )
                    Image(
                        painter = painterResource(id = images[currentIndex]),
                        contentDescription = null,
                        modifier = Modifier
                            .fillMaxSize()
                            .graphicsLayer(translationY = offsetY),
                        contentScale = ContentScale.Fit // Сохранение пропорций
                    )
                }
                2 -> {
                    // Анимация масштабирования (Zoom In-Out)
                    val scale by animateFloatAsState(
                        targetValue = when (currentIndex) {
                            0 -> 1f // Нормальный размер
                            1 -> 0.5f // Больше
                            2 -> 1.5f // Меньше
                            else -> 1f // Возвращение к нормальному размеру
                        },
                        animationSpec = keyframes {
                            durationMillis = 1500
                            1f at 0 // Начало
                            0.5f at 500 // Уменьшение
                            1.5f at 1000 // Увеличение
                            1f at 1500 // Возвращение к норме
                        }
                    )
                    Image(
                        painter = painterResource(id = images[currentIndex]),
                        contentDescription = null,
                        modifier = Modifier
                            .fillMaxSize()
                            .graphicsLayer(scaleX = scale, scaleY = scale),
                        contentScale = ContentScale.Fit // Сохранение пропорций
                    )
                }
            }

            // Кнопки навигации
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Button(
                    onClick = {
                        currentIndex = if (currentIndex - 1 >= 0) currentIndex - 1 else images.size - 1
                    },
                    shape = RoundedCornerShape(50),
                    modifier = Modifier.size(48.dp)
                ) {
                    Text("<")
                }

                Button(
                    onClick = {
                        currentIndex = if (currentIndex + 1 < images.size) currentIndex + 1 else 0
                    },
                    shape = RoundedCornerShape(50),
                    modifier = Modifier.size(48.dp)
                ) {
                    Text(">")
                }
            }
        }
    }
}


2.2. /app/src/main/res/drawable/ – добавить файлы:

victor_tsoi.jpg
vladimir_vysotsky.jpg
igor_talkov.jpg

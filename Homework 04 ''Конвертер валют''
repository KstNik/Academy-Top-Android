ВНИМАНИЕ! В проекте применяется технология Jetpack Compose


				1. Создание приложения


1.1. Запустить Android Studio

1.2. Выбрать "New Project …"

1.3. Вкладка "Phone and Tablet" -> выбрать "Empty Activity" -> кнопка "Next"

1.4. Вкладка "New Project …"
	a) изменить имя проекта: CurrencyConverter
	b) установить
		Minimum SDK: API 24 ("Nougat"; Android 7.0)
		Build configuration language: Kotlin DSL (build grade.kts) [Recommended]
	c) кнопка "Finish"


				2. Изменения в проекте


2.1. /gradle/libs.versions.toml – (ВНИМАНИЕ! В проекте две папки – .gradle и gradle, файл расположен во второй) изменить код:

[versions]
agp = "8.8.0"
kotlin = "2.0.0"
coreKtx = "1.15.0"
junit = "4.13.2"
junitVersion = "1.2.1"
espressoCore = "3.6.1"
lifecycleRuntimeKtx = "2.8.7"
activityCompose = "1.10.0"
composeBom = "2024.04.01"
androidx-constraintlayout-compose = "1.0.1" # Версия библиотеки ConstraintLayout для Compose

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
androidx-constraintlayout-compose = { group = "androidx.constraintlayout", name = "constraintlayout-compose", version.ref = "androidx-constraintlayout-compose" } # Зависимость для ConstraintLayout в Jetpack Compose

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }


2.2. /app/build.gradle.kts – изменить код:

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
}

android {
    namespace = "com.example.currencyconverter"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.example.currencyconverter"
        minSdk = 24
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        compose = true
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.constraintlayout.compose) // Подключение библиотеки ConstraintLayout для Compose
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}


2.3. /app/src/main/res/values/strings.xml – изменить код:

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Currency Converter</string>
    <string name="amount">Amount</string>
    <string name="converted_amount">Converted Amount</string>
    <string name="from_currency">From currency:</string>
    <string name="to_currency">To currency:</string>
</resources>


2.4. /app/src/main/res/values-ru/strings.xml – создать, добавить код:

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Конвертер валют</string>
    <string name="amount">Сумма</string>
    <string name="converted_amount">Конвертированная сумма</string>
    <string name="from_currency">Из валюты:</string>
    <string name="to_currency">В валюту:</string>
</resources>


2.5. /app/src/main/java/com/example/currencyconverter/MainActivity.kt – изменить код:

package com.example.currencyconverter

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.selection.selectable
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.constraintlayout.compose.ConstraintLayout // Импорт ConstraintLayout

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            CurrencyConverterApp()
        }
    }
}

@Composable
fun CurrencyConverterApp() {
    var amount by remember { mutableStateOf("") }
    var convertedAmount by remember { mutableStateOf("") }
    var fromCurrency by remember { mutableStateOf("RU") }
    var toCurrency by remember { mutableStateOf("USD") }

    val currencies = listOf("RU", "USD", "EUR")

    val exchangeRates = mapOf(
        "RU" to mapOf("USD" to 0.0102, "EUR" to 0.0098),
        "USD" to mapOf("RU" to 98.0126, "EUR" to 0.9571),
        "EUR" to mapOf("RU" to 102.4041, "USD" to 1.0448)
    )

    fun convertCurrency() {
        val amountValue = amount.toDoubleOrNull() ?: 0.0
        val rate = exchangeRates[fromCurrency]?.get(toCurrency) ?: 1.0
        convertedAmount = (amountValue * rate).toString()
    }

    ConstraintLayout(
        modifier = Modifier
            .padding(16.dp)
            .fillMaxSize()
    ) {
        // Создание ссылок для элементов
        val (amountField, fromCurrencyText, fromCurrencyGroup, toCurrencyText, toCurrencyGroup, convertedAmountField) = createRefs()

        // Поле ввода суммы
        TextField(
            value = amount,
            onValueChange = {
                amount = it
                convertCurrency()
            },
            label = { Text(stringResource(id = R.string.amount)) },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            modifier = Modifier
                .fillMaxWidth()
                .constrainAs(amountField) {
                    top.linkTo(parent.top)
                    start.linkTo(parent.start)
                    end.linkTo(parent.end)
                }
        )

        // Текст "Из валюты:"
        Text(
            text = stringResource(id = R.string.from_currency),
            fontSize = 18.sp,
            modifier = Modifier.constrainAs(fromCurrencyText) {
                top.linkTo(amountField.bottom, margin = 16.dp)
                start.linkTo(parent.start)
            }
        )

        // Группа радиокнопок для выбора исходной валюты
        Column(
            modifier = Modifier.constrainAs(fromCurrencyGroup) {
                top.linkTo(fromCurrencyText.bottom, margin = 8.dp)
                start.linkTo(parent.start)
            }
        ) {
            currencies.forEach { currency ->
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier
                        .selectable(
                            selected = (currency == fromCurrency),
                            onClick = {
                                fromCurrency = currency
                                convertCurrency()
                            }
                        )
                        .padding(8.dp)
                ) {
                    RadioButton(
                        selected = (currency == fromCurrency),
                        onClick = {
                            fromCurrency = currency
                            convertCurrency()
                        }
                    )
                    Text(text = currency, modifier = Modifier.padding(start = 8.dp))
                }
            }
        }

        // Текст "В валюту:"
        Text(
            text = stringResource(id = R.string.to_currency),
            fontSize = 18.sp,
            modifier = Modifier.constrainAs(toCurrencyText) {
                top.linkTo(fromCurrencyGroup.bottom, margin = 16.dp)
                start.linkTo(parent.start)
            }
        )

        // Группа радиокнопок для выбора целевой валюты
        Column(
            modifier = Modifier.constrainAs(toCurrencyGroup) {
                top.linkTo(toCurrencyText.bottom, margin = 8.dp)
                start.linkTo(parent.start)
            }
        ) {
            currencies.forEach { currency ->
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier
                        .selectable(
                            selected = (currency == toCurrency),
                            onClick = {
                                toCurrency = currency
                                convertCurrency()
                            }
                        )
                        .padding(8.dp)
                ) {
                    RadioButton(
                        selected = (currency == toCurrency),
                        onClick = {
                            toCurrency = currency
                            convertCurrency()
                        }
                    )
                    Text(text = currency, modifier = Modifier.padding(start = 8.dp))
                }
            }
        }

        // Поле вывода конвертированной суммы
        TextField(
            value = convertedAmount,
            onValueChange = {},
            label = { Text(stringResource(id = R.string.converted_amount)) },
            readOnly = true,
            modifier = Modifier
                .fillMaxWidth()
                .constrainAs(convertedAmountField) {
                    top.linkTo(toCurrencyGroup.bottom, margin = 16.dp)
                    start.linkTo(parent.start)
                    end.linkTo(parent.end)
                }
        )
    }
}


2.6. /app/src/main/java/com/example/currencyconverter/ConstraintLayout.kt – создать, добавить код:

package com.example.currencyconverter

import androidx.compose.foundation.layout.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.Layout
import androidx.compose.ui.unit.Constraints
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp

@Composable
fun ConstraintLayout(
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit
) {
    Layout(
        content = content,
        modifier = modifier
    ) { measurables, constraints ->
        val placeables = measurables.map { it.measure(constraints) }
        layout(constraints.maxWidth, constraints.maxHeight) {
            placeables.forEach { it.placeRelative(0, 0) }
        }
    }
}


				3. Запуск приложения


3.1. Язык эмулятора по умолчанию английский, поэтому программа запустится на английском

3.2. Для перехода на русский:

	3.2.1. Свернуть приложение – нажать кнопку со знаком «O» («Home») расположенную над эмулятором (НЕ НА САМОМ СМАРТФОНЕ!)

	3.2.2. Отобразить все приложения – навести указатель мыши над строкой поиска «Google», нажать правую кнопку и повести вверх

	3.2.3. Сменить язык – двойной щелчок по иконке «Settings» -> пункт меню «Languages & input» -> нажать «Languages» -> нажать «Add a language» -> выбрать «Русский» -> переместить русский язык в приоритет, т.е. перетащить его вверх и поставить в списке выше английского на 1-ое место -> нажать в появившемся диалоговом окне «Change»

	3.2.4. Развернуть приложение – язык изменится на русский


				4. Применение модификаторов и контейнеров в проекте


4.1. Модификаторы layout:

	4.1.1. Настройки текстовых полей (TextField), чтобы они занимали всю доступную ширину

	4.1.2. Добавления отступов между элементами, например modifier = Modifier.

4.2. Контейнеры Layout:

	4.2.1. Column используется для вертикального расположения элементов (текстовые поля, радиокнопки и текст)

	4.2.2. Row используется для горизонтального расположения радиокнопок и текста рядом с ними

4.3. Контейнер ConstraintLayout

	4.3.1. Элементы (например, текстовые поля, радиокнопки и текст) привязываются друг к другу и к границам экрана с помощью constrainAs

	4.3.2. Поле ввода суммы (amountField) привязано к верхней границе экрана

	4.3.3. Группа радиокнопок (fromCurrencyGroup) привязана к тексту "Из валюты:"

	4.3.4. Поле вывода конвертированной суммы (convertedAmountField) привязано к нижней границе группы радиокнопок
